#!/usr/bin/env bash
# Manage multiple configurations for Neovim
# v.2.1
# https://github.com/Uri2001/svim

# Check for required option 'config'
if [ "$#" -lt 1 ]; then
    echo "Usage: $0 [-c] <config> | [-l] | [-r] <config>"
    exit 1
fi

CREATE_CONFIG=false
LIST_CONFIG=false
REMOVE_CONFIG=false

# Parse options
while getopts ":clr:" opt; do
  case $opt in
    c)
      CREATE_CONFIG=true
      ;;
    l)
      LIST_CONFIG=true
      ;;
    r)
      REMOVE_CONFIG=true
      CONFIG_NAME="$OPTARG"
      ;;
    \?)
      echo "Unknown option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

# Remove parsed options
shift $((OPTIND - 1))

if [ "$LIST_CONFIG" = true ]; then
    echo "Available configurations:"
    ls "$HOME/.config/" | grep 'nvim_' | sed 's/nvim_//'
    
    # Output the current configuration
    if [ -L "$HOME/.config/nvim" ]; then
        CURRENT_CONFIG=$(basename "$(readlink "$HOME/.config/nvim")")
        echo "Current configuration: ${CURRENT_CONFIG#nvim_}"
    else
        echo "No current configuration is set."
    fi
    exit 0
fi

if [ "$REMOVE_CONFIG" = true ]; then
    if [ -L "$HOME/.config/nvim" ]; then
        CURRENT_CONFIG=$(basename "$(readlink "$HOME/.config/nvim")")
        if [ "$CURRENT_CONFIG" = "nvim_$CONFIG_NAME" ]; then
            echo "Error: You cannot delete the current configuration '$CURRENT_CONFIG'. Please switch to another configuration first."
            exit 1
        fi
    fi

    CONFIRM_NAME=""
    echo "Are you sure you want to remove the configuration '$CONFIG_NAME'? (type it twice to confirm)"
    
    read -p "Enter configuration name: " CONFIRM_NAME_1
    read -p "Confirm configuration name: " CONFIRM_NAME_2
    
    if [ "$CONFIRM_NAME_1" != "$CONFIG_NAME" ] || [ "$CONFIRM_NAME_1" != "$CONFIRM_NAME_2" ]; then
        echo "Configuration name does not match. Aborting deletion."
        exit 1
    fi
    
    CONFIG_PATH="$HOME/.config/nvim_$CONFIG_NAME"
    SHARE_PATH="$HOME/.local/share/nvim_$CONFIG_NAME"
    CACHE_PATH="$HOME/.cache/nvim_$CONFIG_NAME"

    if [ -d "$CONFIG_PATH" ]; then
        rm -rf "$CONFIG_PATH" "$SHARE_PATH" "$CACHE_PATH"
        echo "Configuration '$CONFIG_NAME' has been removed."
    else
        echo "Error: Configuration '$CONFIG_NAME' does not exist."
        exit 1
    fi
    exit 0
fi

CONFIG_NAME="$1"

# Config paths
CONFIG_PATH="$HOME/.config/nvim_$CONFIG_NAME"
SHARE_PATH="$HOME/.local/share/nvim_$CONFIG_NAME"
CACHE_PATH="$HOME/.cache/nvim_$CONFIG_NAME"

# Links paths
NVIM_CONFIG="$HOME/.config/nvim"
NVIM_SHARE="$HOME/.local/share/nvim"
NVIM_CACHE="$HOME/.cache/nvim"

if [ "$CREATE_CONFIG" = true ]; then
    if [ -d "$CONFIG_PATH" ] || [ -d "$SHARE_PATH" ] || [ -d "$CACHE_PATH" ]; then
        echo "Error: Configuration directories already exist."
        exit 1
    fi

    mkdir -p "$CONFIG_PATH" "$SHARE_PATH" "$CACHE_PATH"

    [ -L "$NVIM_CONFIG" ] && rm "$NVIM_CONFIG"
    [ -L "$NVIM_SHARE" ] && rm "$NVIM_SHARE"
    [ -L "$NVIM_CACHE" ] && rm "$NVIM_CACHE"

    ln -s "$CONFIG_PATH" "$NVIM_CONFIG"
    ln -s "$SHARE_PATH" "$NVIM_SHARE"
    ln -s "$CACHE_PATH" "$NVIM_CACHE"

    echo "New configuration 'nvim_$CONFIG_NAME' created and switched to."
else
    if [ ! -d "$CONFIG_PATH" ] || [ ! -d "$SHARE_PATH" ] || [ ! -d "$CACHE_PATH" ]; then
        echo "Error: one or more configuration dirs don't exist."
        exit 1
    fi

    [ -L "$NVIM_CONFIG" ] && rm "$NVIM_CONFIG"
    [ -L "$NVIM_SHARE" ] && rm "$NVIM_SHARE"
    [ -L "$NVIM_CACHE" ] && rm "$NVIM_CACHE"

    ln -s "$CONFIG_PATH" "$NVIM_CONFIG"
    ln -s "$SHARE_PATH" "$NVIM_SHARE"
    ln -s "$CACHE_PATH" "$NVIM_CACHE"

    echo "Switched to 'nvim_$CONFIG_NAME'."
fi
